"""
This script takes as input a models.py file, usually generated by django with
    `python3 manage.py inspectdb`
And orders its contents so that the file can be used right away.

The specific order is defined in the `orderlist` list, and in this case 
it is tailored to the RG4BP database schema.
"""

# -- IMPORTS --

import argparse
from os import rename # to rename the original file
from sys import exit


# -- FUNCTIONS --

# List used to check orders of the blocks
orderlist = ["reference",
	"technique",
	"regiontype",
	"disease",
	"rnabiology",
	"biologyfunction",
	"organism",
	"gene",
	"transcript",
	"rg4bp",
	"bindingsite",
	"rg4",
	"rg4bptorg4",
	"rg4bptophenotype",
	"diseasetogene",
	"rg4totranscript",
	"rg4togene",
	"bindingsitetotranscript",
	"bindingsitetogene"]

def main_function(filename):
    """
    Gets as input a models file, backs it up as `filename`.old,
    reorders its contents and saves it as models.py
    """
    
    # Rename original file
    rename(filename, filename + ".old")

    # Read the original file into models, it contains a `block` for each
    # class we want to order. e.g. models[1] is the 1st block.
    # note that the 0-block is the header of the file.
    models = open(filename + '.old', 'r').read().split('\n\n\n')

    # Order the pieces from the original file wrt the orderlist
    queue = []
    for old_position, block in enumerate(models[1:]):
        blockname = block.split('(')[0].strip('class ')
        # `new_position` is the position we want the block to have in the new file
        new_position = orderlist.index(blockname)
        queue.append((new_position, old_position+1))
    # here we are ordering based on the `new_position` values
    queue.sort()

    # Save the new file with the correct order
    with open('models.py', 'w+') as outfile:
        # write the header lines
        outfile.write("# This file was automatically ordered with the `order_models.py` script\n")
        outfile.write("# I still suggest to do a quick check of the other steps\n")
        outfile.write("#\n")
        outfile.write(models[0])
        
        # write the ordered blocks
        # `queue` contains the coordinates, the actual data is in `models`
        for coords in queue:
            outfile.write("\n\n\n" + models[coords[1]])
    return 0


# -- MAIN --

if __name__ == "__main__":    
    # Parser
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--file', type=str, action='store', default="models.py",
            help='the name of the models file. Default = "models.py"', 
            required=True)
    args = parser.parse_args()

    # Checks
    if input("The filename you selected is {}, are you sure? [y/N]: ".format(args.file)) in ["y", "Y", "yes", "Yes"]:
        # Execute main function
        main_function(args.file)
    else:
        print("Understood. Aborting.")
        exit(1)

    print("Operation completed. The ordered file is called:\n\tmodels.py")
